/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var renderer;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/CanvasManager.ts":
/*!**********************************!*\
  !*** ./scripts/CanvasManager.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CanvasManager)\n/* harmony export */ });\n/* harmony import */ var _utils_ColorsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ColorsUtils */ \"./scripts/utils/ColorsUtils.ts\");\n// \n// CanvasManager.ts\n//\n\nclass CanvasManager {\n    // Size\n    width;\n    height;\n    // HTML element and context\n    element;\n    context;\n    // Mouse position on screen\n    mousePosition;\n    constructor(containerElement, width, heigth) {\n        this.width = width;\n        this.height = heigth;\n        this.element = document.createElement(\"canvas\");\n        this.element.width = width;\n        this.element.height = heigth;\n        this.element.className = \"canvas\";\n        this.element.addEventListener(\"mousemove\", (e) => {\n            this.trackMousePosition(e);\n        });\n        containerElement.appendChild(this.element);\n        this.context = this.element.getContext(\"2d\");\n        this.mousePosition = {\n            x: 0,\n            y: 0\n        };\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    getMousePosition() {\n        return {\n            x: this.mousePosition.x,\n            y: this.mousePosition.y\n        };\n    }\n    setImageSmoothing(imageSmoothing) {\n        this.context.imageSmoothingEnabled = imageSmoothing;\n    }\n    clear() {\n        this.context.beginPath();\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n        this.context.closePath();\n    }\n    clearColor(color) {\n        this.context.beginPath();\n        this.context.fillStyle = _utils_ColorsUtils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toString(color);\n        this.context.fillRect(0, 0, this.element.width, this.element.height);\n        this.context.closePath();\n    }\n    drawPoint(x, y, color) {\n        this.context.beginPath();\n        this.context.fillStyle = _utils_ColorsUtils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toString(color);\n        this.context.fillRect(x, y, 1, 1);\n        this.context.closePath();\n    }\n    drawCircle(x, y, color, size = 1) {\n        this.context.beginPath();\n        this.context.fillStyle = _utils_ColorsUtils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].toString(color);\n        this.context.arc(x, y, size, 0, 2 * Math.PI);\n        this.context.fill();\n        this.context.closePath();\n    }\n    trackMousePosition(event) {\n        let rect = this.element.getBoundingClientRect();\n        this.mousePosition.x = (event.clientX - rect.left) * this.width / rect.width;\n        this.mousePosition.y = (event.clientY - rect.top) * this.height / rect.height;\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/CanvasManager.ts?");

/***/ }),

/***/ "./scripts/GridDrawer.ts":
/*!*******************************!*\
  !*** ./scripts/GridDrawer.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GridDrawer)\n/* harmony export */ });\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Utils */ \"./scripts/utils/Utils.ts\");\n/* harmony import */ var _utils_ColorsUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/ColorsUtils */ \"./scripts/utils/ColorsUtils.ts\");\n// \n// GridDrawer.ts\n//\n\n\nclass GridDrawer {\n    // Canvas\n    canvas;\n    constructor(canvas) {\n        this.canvas = canvas;\n    }\n    draw(data, schematic) {\n        // Clear canvas\n        this.canvas.clear();\n        // Draw palette map\n        if (schematic.palette != undefined) {\n            for (let x = 0; x < this.canvas.getWidth(); x++) {\n                for (let y = 0; y < this.canvas.getHeight(); y++) {\n                    let value = this.getDataForPoint(data, x, y);\n                    let color = this.getColorFromValue(value, schematic);\n                    this.canvas.drawPoint(x, y, color);\n                }\n            }\n        }\n        // Draw contour line maps\n        if (schematic.contourLines != undefined) {\n            for (let contourLineConfig of schematic.contourLines) {\n                for (let x = 0; x < this.canvas.getWidth(); x++) {\n                    for (let y = 0; y < this.canvas.getHeight(); y++) {\n                        let l = contourLineConfig;\n                        let c = Math.trunc(this.getDataForPoint(data, x, y) * 10) / 10;\n                        let c0 = this.mod(c, l);\n                        let c1 = Math.trunc(this.getDataForPoint(data, x - 1, y) * 10) / 10;\n                        let c2 = Math.trunc(this.getDataForPoint(data, x + 1, y) * 10) / 10;\n                        let c3 = Math.trunc(this.getDataForPoint(data, x, y - 1) * 10) / 10;\n                        let c4 = Math.trunc(this.getDataForPoint(data, x, y + 1) * 10) / 10;\n                        let c5 = Math.trunc(this.getDataForPoint(data, x - 1, y - 1) * 10) / 10;\n                        let c6 = Math.trunc(this.getDataForPoint(data, x - 1, y + 1) * 10) / 10;\n                        let c7 = Math.trunc(this.getDataForPoint(data, x + 1, y - 1) * 10) / 10;\n                        let c8 = Math.trunc(this.getDataForPoint(data, x + 1, y + 1) * 10) / 10;\n                        if ((c > c1 && c0 < this.mod(c1, l)) || (c > c2 && c0 < this.mod(c2, l)) ||\n                            (c > c3 && c0 < this.mod(c3, l)) || (c > c4 && c0 < this.mod(c4, l)) ||\n                            (c > c5 && c0 < this.mod(c5, l)) || (c > c6 && c0 < this.mod(c6, l)) ||\n                            (c > c7 && c0 < this.mod(c7, l)) || (c > c8 && c0 < this.mod(c8, l))) {\n                            this.canvas.drawCircle(x, y, contourLineConfig.color, contourLineConfig.size);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    getDataForPoint(data, x, y) {\n        let dataX = Math.floor(x * (data.getWidth() / this.canvas.getWidth()));\n        let dataY = Math.floor(y * (data.getHeight() / this.canvas.getHeight()));\n        return data.getIndexAt(dataX, dataY);\n    }\n    getColorFromValue(value, schematic) {\n        let color = [0, 0, 0];\n        let paletteConfig = schematic.palette;\n        if (value != undefined && !isNaN(value)) {\n            if (paletteConfig.discretize) {\n                value = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].discretize(value, paletteConfig.discretize);\n            }\n            let r0 = paletteConfig.valueRange[0];\n            let r1 = paletteConfig.valueRange[1];\n            let index = Math.min(Math.max(_utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].inverseLerp(r0, r1, value), 0), 1);\n            index *= paletteConfig.colorPalette.length - 1;\n            if (paletteConfig.interpolate == true && index + 1 < paletteConfig.colorPalette.length) {\n                let v0 = Math.floor(index);\n                let v1 = Math.floor(index) + 1;\n                let color1 = paletteConfig.colorPalette[Math.floor(index)];\n                let color2 = paletteConfig.colorPalette[Math.floor(index + 1)];\n                let t = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lerp(v0, v1, index);\n                color = _utils_ColorsUtils__WEBPACK_IMPORTED_MODULE_1__[\"default\"].lerp(color1, color2, t);\n            }\n            else {\n                color = paletteConfig.colorPalette[Math.trunc(index)];\n            }\n        }\n        return color;\n    }\n    mod(c, l) {\n        return (((c + l.increment) % l.interval) + l.interval) % l.interval;\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/GridDrawer.ts?");

/***/ }),

/***/ "./scripts/GridDrawerSchematics.ts":
/*!*****************************************!*\
  !*** ./scripts/GridDrawerSchematics.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   geopotentialSchematic: () => (/* binding */ geopotentialSchematic),\n/* harmony export */   irradianceSchematic: () => (/* binding */ irradianceSchematic),\n/* harmony export */   moistureSchematic: () => (/* binding */ moistureSchematic),\n/* harmony export */   precipitationsSchematic: () => (/* binding */ precipitationsSchematic),\n/* harmony export */   pressureSchematic: () => (/* binding */ pressureSchematic),\n/* harmony export */   temperatureSchematic: () => (/* binding */ temperatureSchematic),\n/* harmony export */   windDirectionSchematic: () => (/* binding */ windDirectionSchematic),\n/* harmony export */   windSpeedSchematic: () => (/* binding */ windSpeedSchematic)\n/* harmony export */ });\n// \n// GridDrawerSchematics.ts\n//\nconst rainbowPalette = [[221, 221, 221], [176, 176, 176], [137, 98, 141], [91, 65, 94], [58, 6, 62],\n    [87, 13, 93], [156, 30, 164], [117, 29, 124], [87, 13, 62], [49, 51, 99], [18, 50, 147], [0, 0, 196], [0, 0, 245],\n    [34, 84, 245], [67, 151, 247], [103, 201, 250], [146, 252, 253], [146, 252, 163], [146, 252, 122], [102, 255, 0],\n    [191, 250, 14], [255, 255, 9], [255, 255, 134], [253, 232, 81], [255, 204, 0], [255, 153, 0], [255, 102, 0],\n    [255, 51, 51], [255, 51, 0], [255, 0, 0], [204, 0, 0], [153, 0, 0], [108, 0, 0], [79, 0, 0], [0, 0, 0]];\nconst whiteBlueGreenRedPalette = [[255, 255, 255], [151, 230, 255], [51, 204, 255], [0, 153, 255], [0, 255, 153],\n    [51, 204, 102], [102, 204, 51], [102, 255, 0], [164, 242, 47], [183, 207, 14], [214, 240, 23], [204, 153, 0],\n    [255, 53, 0], [255, 53, 102], [204, 153, 153], [204, 102, 51], [204, 51, 51], [255, 13, 13], [198, 0, 0], [128, 0, 0],\n    [96, 0, 0], [64, 0, 0], [64, 0, 64]];\nconst irradianceSchematic = {\n    palette: {\n        colorPalette: [[255, 255, 255], [255, 216, 0]],\n        valueRange: [80, 120],\n        interpolate: true,\n        discretize: 1\n    }\n};\nconst moistureSchematic = {\n    palette: {\n        colorPalette: [[255, 255, 255], [0, 21, 255]],\n        valueRange: [0, 5],\n        interpolate: true\n    }\n};\nconst temperatureSchematic = {\n    palette: {\n        colorPalette: rainbowPalette,\n        valueRange: [-34, 36],\n        interpolate: false,\n        discretize: 2\n    },\n    contourLines: [{\n            interval: 20,\n            increment: 0,\n            color: [0, 0, 0],\n            size: 1\n        }]\n};\nconst pressureSchematic = {\n    palette: {\n        colorPalette: rainbowPalette,\n        valueRange: [970, 1050],\n        interpolate: false,\n        discretize: 2\n    },\n    contourLines: [\n        {\n            interval: 5,\n            increment: 0,\n            color: [255, 255, 255],\n            size: 0.5\n        },\n        {\n            interval: 10,\n            increment: 0,\n            color: [255, 255, 255],\n            size: 0.75\n        }\n    ]\n};\nconst windSpeedSchematic = {\n    palette: {\n        colorPalette: whiteBlueGreenRedPalette,\n        valueRange: [0, 130],\n        interpolate: false,\n        discretize: 2\n    }\n};\nconst windDirectionSchematic = {\n    palette: {\n        colorPalette: [[0, 0, 0], [255, 255, 255]],\n        valueRange: [0, 6.28],\n        interpolate: true,\n        discretize: 0.01\n    }\n};\nconst geopotentialSchematic = {\n    palette: {\n        colorPalette: rainbowPalette,\n        valueRange: [493, 600],\n        interpolate: false,\n        discretize: 1\n    }\n};\nconst precipitationsSchematic = {\n    palette: {\n        colorPalette: whiteBlueGreenRedPalette,\n        valueRange: [0, 30],\n        interpolate: false,\n        discretize: 1\n    }\n};\n\n\n//# sourceURL=webpack://renderer/./scripts/GridDrawerSchematics.ts?");

/***/ }),

/***/ "./scripts/MainRenderer.ts":
/*!*********************************!*\
  !*** ./scripts/MainRenderer.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   renderer: () => (/* binding */ renderer)\n/* harmony export */ });\n/* harmony import */ var _engine_Engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine/Engine */ \"./scripts/engine/Engine.ts\");\n/* harmony import */ var _CanvasManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CanvasManager */ \"./scripts/CanvasManager.ts\");\n/* harmony import */ var _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GridDrawerSchematics */ \"./scripts/GridDrawerSchematics.ts\");\n/* harmony import */ var _GridDrawer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GridDrawer */ \"./scripts/GridDrawer.ts\");\n// \n// MainRenderer.ts\n//\n\n\n\n\nconst WeatherParamToSchematic = {\n    \"irradiance\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.irradianceSchematic,\n    \"temperature\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.temperatureSchematic,\n    \"pressure\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.pressureSchematic,\n    \"windSpeed\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.windSpeedSchematic,\n    \"windDirection\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.windDirectionSchematic,\n    \"moisture\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.moistureSchematic,\n    \"geopotential\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.geopotentialSchematic,\n    \"precipitations\": _GridDrawerSchematics__WEBPACK_IMPORTED_MODULE_2__.precipitationsSchematic\n};\nclass MainRenderer {\n    // Canvas\n    static CANVAS_WIDTH = 256;\n    static CANVAS_HEIGHT = 256;\n    canvas;\n    // Grid drawer\n    gridDrawer;\n    // Engine\n    engine;\n    // Selected weather parameter\n    selectedWeatherParam = \"temperature\";\n    // Loop values\n    engineIsPlaying = false;\n    lastUpdateTime = 0;\n    // Retrived weather parameter data\n    weatherData;\n    constructor() {\n        let canvasContainer = document.getElementById(\"canvasContainer\");\n        this.canvas = new _CanvasManager__WEBPACK_IMPORTED_MODULE_1__[\"default\"](canvasContainer, MainRenderer.CANVAS_WIDTH, MainRenderer.CANVAS_HEIGHT);\n        this.gridDrawer = new _GridDrawer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this.canvas);\n        this.engine = new _engine_Engine__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    }\n    playEngine() {\n        this.engineIsPlaying = true;\n    }\n    pauseEngine() {\n        this.engineIsPlaying = false;\n    }\n    init() {\n        // HTML Element handlers\n        this.registyEventHandlers();\n        // Init engine\n        this.engine.init();\n        // Retrive weather data\n        this.weatherData = this.engine.getWeatherParamData(this.selectedWeatherParam);\n        // Draw weather data\n        this.drawCanvas();\n        // Start update loop\n        this.lastUpdateTime = Date.now();\n        window.requestAnimationFrame(this.update.bind(this));\n    }\n    update() {\n        // Timing\n        window.requestAnimationFrame(this.update.bind(this));\n        let now = Date.now();\n        let elapsed = now - this.lastUpdateTime;\n        // Mouse pos\n        this.updateMouseTitle();\n        // Update engine\n        if (elapsed > 100) {\n            this.lastUpdateTime = now - (elapsed % 100);\n            // Update engine state\n            if (this.engineIsPlaying) {\n                this.updateDraw();\n            }\n        }\n    }\n    setSelectedWeatherParam(weatherParam) {\n        this.selectedWeatherParam = weatherParam;\n        this.weatherData = this.engine.getWeatherParamData(this.selectedWeatherParam);\n        this.drawCanvas();\n    }\n    registyEventHandlers() {\n        // Next button\n        document.getElementById(\"nextButton\").addEventListener(\"click\", (e) => {\n            this.updateDraw();\n        });\n        // Play button\n        document.getElementById(\"playButton\").addEventListener(\"click\", (e) => {\n            this.playEngine();\n        });\n        // Pause button\n        document.getElementById(\"pauseButton\").addEventListener(\"click\", (e) => {\n            this.pauseEngine();\n        });\n        // Irradiance button\n        document.getElementById(\"irradianceButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"irradiance\");\n        });\n        // Moisture button\n        document.getElementById(\"moistureButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"moisture\");\n        });\n        // Temperature button\n        document.getElementById(\"temperatureButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"temperature\");\n        });\n        // Pressure button\n        document.getElementById(\"pressureButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"pressure\");\n        });\n        // Wind speed button\n        document.getElementById(\"windSpeedButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"windSpeed\");\n        });\n        // Wind direction button\n        document.getElementById(\"windDirectionButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"windDirection\");\n        });\n        // Geopotential button\n        document.getElementById(\"geopotentialButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"geopotential\");\n        });\n        // Precipitations button\n        document.getElementById(\"precipitationsButton\").addEventListener(\"click\", (e) => {\n            this.setSelectedWeatherParam(\"precipitations\");\n        });\n        // Irradiance range\n        document.getElementById(\"irradianceRange\").addEventListener(\"input\", (e) => {\n            let value = e.target.value;\n            this.engine.setBaseIrradiance(parseFloat(value));\n            e.target.title = value;\n            document.getElementById(\"irradianceRangeValue\").innerText = value;\n        });\n        // Cyclone irradiance range\n        document.getElementById(\"cycloneStrengthRange\").addEventListener(\"input\", (e) => {\n            let value = e.target.value;\n            this.engine.setCyclonesStrength(parseFloat(value));\n            e.target.title = value;\n            document.getElementById(\"cycloneStrengthRangeValue\").innerText = value;\n        });\n        // Anticyclone irradiance range\n        document.getElementById(\"anticycloneStrengthRange\").addEventListener(\"input\", (e) => {\n            let value = e.target.value;\n            this.engine.setAnticyclonesStrength(parseFloat(value));\n            e.target.title = value;\n            document.getElementById(\"anticycloneStrengthRangeValue\").innerText = value;\n        });\n    }\n    updateDraw() {\n        // Update engine\n        this.engine.nextTick();\n        // Retrive weather data\n        this.weatherData = this.engine.getWeatherParamData(this.selectedWeatherParam);\n        // Draw weather data\n        this.drawCanvas();\n        // Update time count\n        document.getElementById(\"timeTitle\").innerText = \"Time: \" + this.engine.getTime();\n    }\n    drawCanvas() {\n        let schematic = WeatherParamToSchematic[this.selectedWeatherParam];\n        this.gridDrawer.draw(this.weatherData.data, schematic);\n    }\n    updateMouseTitle() {\n        if (this.weatherData) {\n            let x = Math.floor(this.canvas.getMousePosition().x);\n            let y = Math.floor(this.canvas.getMousePosition().y);\n            let dataX = Math.floor(x * (this.weatherData.data.getWidth() / this.canvas.getWidth()));\n            let dataY = Math.floor(y * (this.weatherData.data.getHeight() / this.canvas.getHeight()));\n            let value = this.weatherData.data.getIndexAt(dataX, dataY).toFixed(2);\n            document.getElementById(\"canvasPositionCoord\").innerHTML = \"x: \" + dataX + \" y: \" + dataY;\n            document.getElementById(\"canvasPositionValue\").innerHTML = \"value: <b>\" + value + \"</b>\";\n        }\n    }\n}\nwindow.onload = () => {\n    renderer = new MainRenderer();\n    renderer.init();\n};\nlet renderer;\n\n\n//# sourceURL=webpack://renderer/./scripts/MainRenderer.ts?");

/***/ }),

/***/ "./scripts/common/Grid.ts":
/*!********************************!*\
  !*** ./scripts/common/Grid.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Grid)\n/* harmony export */ });\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Utils */ \"./scripts/utils/Utils.ts\");\n// \n// Grid.ts\n//\n\nclass Grid {\n    // Grid size\n    width;\n    height;\n    // Grid data\n    data;\n    constructor(width, height, baseValue) {\n        this.width = width;\n        this.height = height;\n        this.data = new Array(this.width * this.height);\n        this.fill(baseValue);\n    }\n    getWidth() {\n        return this.width;\n    }\n    getHeight() {\n        return this.height;\n    }\n    fill(value) {\n        this.data.fill(value);\n    }\n    copyFrom(grid) {\n        for (let x = 0; x < this.width; x++) {\n            for (let y = 0; y < this.height; y++) {\n                this.setIndexAt(x, y, grid.getIndexAt(x, y));\n            }\n        }\n    }\n    setIndexAt(x, y, value) {\n        let index = this.calculateIndex(x, y);\n        this.data[index] = value;\n    }\n    getIndexAt(x, y) {\n        let index = this.calculateIndex(x, y);\n        return this.data[index];\n    }\n    calculateIndex(x, y) {\n        if (x < 0 || x >= this.width)\n            x = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mod(x, this.width);\n        if (y < 0 || y >= this.height)\n            y = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mod(y, this.height);\n        return x * this.height + y;\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/common/Grid.ts?");

/***/ }),

/***/ "./scripts/engine/ClimateAreaEntity.ts":
/*!*********************************************!*\
  !*** ./scripts/engine/ClimateAreaEntity.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ClimateAreaEntity)\n/* harmony export */ });\n// \n// ClimateAreaEntity.ts\n//\nclass ClimateAreaEntity {\n    position;\n    size;\n    strength;\n    constructor(config) {\n        this.position = config.spawnPos;\n        this.size = config.size;\n        this.strength = config.strength;\n    }\n    getPosition() {\n        return this.position;\n    }\n    setPosition(position) {\n        this.position = position;\n    }\n    getSize() {\n        return this.size;\n    }\n    getStrength() {\n        return this.strength;\n    }\n    setStrength(strength) {\n        this.strength = strength;\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/engine/ClimateAreaEntity.ts?");

/***/ }),

/***/ "./scripts/engine/ClimateAreaEntityManager.ts":
/*!****************************************************!*\
  !*** ./scripts/engine/ClimateAreaEntityManager.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ClimateAreaEntityManager)\n/* harmony export */ });\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Utils */ \"./scripts/utils/Utils.ts\");\n/* harmony import */ var _PermanentClimateAreaEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PermanentClimateAreaEntity */ \"./scripts/engine/PermanentClimateAreaEntity.ts\");\n// \n// ClimateAreaEntityManager.ts\n//\n\n\nclass ClimateAreaEntityManager {\n    // Climate area entity list\n    climateAreaEntityList;\n    // Cyclone list\n    cycloneList;\n    // Anticyclone list\n    anticycloneList;\n    constructor() {\n        this.climateAreaEntityList = new Array();\n        this.cycloneList = new Array();\n        this.anticycloneList = new Array();\n    }\n    getClimateAreaEntityList() {\n        return this.climateAreaEntityList;\n    }\n    getCycloneList() {\n        return this.cycloneList;\n    }\n    getAnticycloneList() {\n        return this.anticycloneList;\n    }\n    generateCyclone() {\n        let cyclone = this.buildCyclone();\n        cyclone.init();\n        this.climateAreaEntityList.push(cyclone);\n        this.cycloneList.push(cyclone);\n        return cyclone;\n    }\n    generateAnticyclone() {\n        let anticyclone = this.buildAnticyclone();\n        anticyclone.init();\n        this.climateAreaEntityList.push(anticyclone);\n        this.anticycloneList.push(anticyclone);\n        return anticyclone;\n    }\n    setCyclonesStrength(strength) {\n        let cycloneList = this.getCycloneList();\n        for (let cyclone of cycloneList) {\n            cyclone.setStrength(strength);\n        }\n    }\n    setAnticyclonesStrength(strength) {\n        let anticycloneList = this.getAnticycloneList();\n        for (let anticyclone of anticycloneList) {\n            anticyclone.setStrength(strength);\n        }\n    }\n    update(time) {\n        // Update the cyclonic and anticyclonic areas\n        for (let climateAreaEntity of this.climateAreaEntityList) {\n            climateAreaEntity.update(time);\n        }\n    }\n    getEntitiesIrradianceContributeAt(position) {\n        let irradianceContribute = 0;\n        for (let climateAreaEntity of this.climateAreaEntityList) {\n            let innerPosition = this.transformCoordToClimateAreaEntityCoord(climateAreaEntity, position);\n            irradianceContribute += climateAreaEntity.getIrradianceContributeAt(innerPosition);\n        }\n        return irradianceContribute;\n    }\n    getEntitiesMoistureContributeAt(position) {\n        let moistureContribute = 0;\n        for (let climateAreaEntity of this.climateAreaEntityList) {\n            let innerPosition = this.transformCoordToClimateAreaEntityCoord(climateAreaEntity, position);\n            moistureContribute += climateAreaEntity.getMoistureContributeAt(innerPosition);\n        }\n        return moistureContribute;\n    }\n    buildCyclone() {\n        const config = {\n            spawnPos: {\n                x: 64,\n                y: 32,\n            },\n            size: {\n                x: 128,\n                y: 96,\n            },\n            strength: 1,\n            irradianceConfig: {\n                range: [0, -40],\n                seed: Math.floor(_utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].random(0, 67677)),\n                strength: 1,\n                zoom: 8\n            },\n            moistureConfig: {\n                range: [-1.0, 1.2],\n                seed: Math.floor(_utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].random(0, 67677)),\n                strength: 1,\n                zoom: 8\n            }\n        };\n        let cyclone = new _PermanentClimateAreaEntity__WEBPACK_IMPORTED_MODULE_1__[\"default\"](config);\n        return cyclone;\n    }\n    buildAnticyclone() {\n        const config = {\n            spawnPos: {\n                x: 64,\n                y: 96,\n            },\n            size: {\n                x: 128,\n                y: 128,\n            },\n            strength: 1,\n            irradianceConfig: {\n                range: [3, 30],\n                seed: Math.floor(_utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].random(0, 67677)),\n                strength: 1,\n                zoom: 8\n            },\n            moistureConfig: {\n                range: [-1.5, 2.0],\n                seed: Math.floor(_utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].random(0, 67677)),\n                strength: 1,\n                zoom: 8\n            }\n        };\n        let anticyclone = new _PermanentClimateAreaEntity__WEBPACK_IMPORTED_MODULE_1__[\"default\"](config);\n        return anticyclone;\n    }\n    transformCoordToClimateAreaEntityCoord(climateAreaEntity, position) {\n        // Coordinates relative to the area position\n        let x0 = position.x - climateAreaEntity.getPosition().x;\n        let y0 = position.y - climateAreaEntity.getPosition().y;\n        // Area radius\n        let rx = Math.floor(climateAreaEntity.getSize().x / 2);\n        let ry = Math.floor(climateAreaEntity.getSize().y / 2);\n        // Sum\n        x0 += rx;\n        y0 += ry;\n        return {\n            x: x0,\n            y: y0\n        };\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/engine/ClimateAreaEntityManager.ts?");

/***/ }),

/***/ "./scripts/engine/Engine.ts":
/*!**********************************!*\
  !*** ./scripts/engine/Engine.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Engine)\n/* harmony export */ });\n/* harmony import */ var _common_Grid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/Grid */ \"./scripts/common/Grid.ts\");\n/* harmony import */ var _GlobalClimateSystem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GlobalClimateSystem */ \"./scripts/engine/GlobalClimateSystem.ts\");\n// \n// Engine.ts\n//\n\n\nclass Engine {\n    // Grid size\n    static GRID_SIZE_X = 128;\n    static GRID_SIZE_Y = 128;\n    // Global climare system\n    globalClimate;\n    // Time counter\n    time = -1;\n    constructor() {\n        this.globalClimate = new _GlobalClimateSystem__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({ size: { x: Engine.GRID_SIZE_X, y: Engine.GRID_SIZE_Y } });\n    }\n    init() {\n        this.time = 0;\n        this.globalClimate.init();\n    }\n    nextTick() {\n        if (this.time == -1)\n            return;\n        this.time++;\n        this.globalClimate.update(this.time);\n    }\n    getTime() {\n        return this.time;\n    }\n    setBaseIrradiance(irradiance) {\n        this.globalClimate.setBaseIrradiance(irradiance);\n    }\n    setCyclonesStrength(strength) {\n        this.globalClimate.setCyclonesStrength(strength);\n    }\n    setAnticyclonesStrength(strength) {\n        this.globalClimate.setAnticyclonesStrength(strength);\n    }\n    getWeatherParamData(paramName) {\n        let grid = new _common_Grid__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.globalClimate.getSize().x, this.globalClimate.getSize().y, 0);\n        for (let x = 0; x < Engine.GRID_SIZE_X; x++) {\n            for (let y = 0; y < Engine.GRID_SIZE_Y; y++) {\n                let data = this.globalClimate.getPointWeatherDataAt(x, y);\n                let value = data[paramName];\n                grid.setIndexAt(x, y, value);\n            }\n        }\n        return {\n            paramName: paramName,\n            time: this.time,\n            data: grid\n        };\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/engine/Engine.ts?");

/***/ }),

/***/ "./scripts/engine/GlobalClimateSystem.ts":
/*!***********************************************!*\
  !*** ./scripts/engine/GlobalClimateSystem.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GlobalClimateSystem)\n/* harmony export */ });\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Utils */ \"./scripts/utils/Utils.ts\");\n/* harmony import */ var _common_Grid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/Grid */ \"./scripts/common/Grid.ts\");\n/* harmony import */ var _common_GridUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./common/GridUtils */ \"./scripts/engine/common/GridUtils.ts\");\n/* harmony import */ var _ClimateAreaEntityManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ClimateAreaEntityManager */ \"./scripts/engine/ClimateAreaEntityManager.ts\");\n//\n// GlobalClimateSystem.ts\n//\n\n\n\n\nclass GlobalClimateSystem {\n    // Constants\n    static R_DRY_AIR = 287.05;\n    static GRAVITY = 9.81;\n    static BASE_PRESSURE = 1025;\n    // Base irradiance\n    baseIrradiance = 100;\n    // Simulation grid size\n    size;\n    // Climate area entity manager\n    climateAreaEntityManager;\n    // Parameter grids\n    irradianceGrid;\n    moistureGrid;\n    oldTemperatureGrid;\n    temperatureGrid;\n    pressureGrid;\n    windSpeedXGrid;\n    windSpeedYGrid;\n    geopotentialGrid;\n    precipitationsGrid;\n    constructor(config) {\n        this.size = config.size;\n        this.climateAreaEntityManager = new _ClimateAreaEntityManager__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n        this.irradianceGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 100);\n        this.moistureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 1.0);\n        this.oldTemperatureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 15);\n        this.temperatureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 15);\n        this.pressureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, GlobalClimateSystem.BASE_PRESSURE);\n        this.windSpeedXGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        this.windSpeedYGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        this.geopotentialGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        this.precipitationsGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n    }\n    getSize() {\n        return this.size;\n    }\n    getBaseIrradiance() {\n        return this.baseIrradiance;\n    }\n    setBaseIrradiance(irradiance) {\n        this.baseIrradiance = irradiance;\n    }\n    setCyclonesStrength(strength) {\n        this.climateAreaEntityManager.setCyclonesStrength(strength);\n    }\n    setAnticyclonesStrength(strength) {\n        this.climateAreaEntityManager.setAnticyclonesStrength(strength);\n    }\n    init() {\n        // Generate climate area entities\n        this.climateAreaEntityManager.generateCyclone();\n        this.climateAreaEntityManager.generateAnticyclone();\n    }\n    update(time) {\n        // Set old temperature grid\n        this.oldTemperatureGrid.copyFrom(this.temperatureGrid);\n        // Update climate area entities\n        this.climateAreaEntityManager.update(time);\n        // Update irradiance and moisture grids\n        this.generateOrUpdateIrradianceAndMoisture();\n        // Relax temperature\n        this.relaxTemperature();\n        // Update temperature from irradiance\n        this.updateTemperatureFromIrradiance(time);\n        // Advect temperature, moisture and pressure based on wind\n        this.advectMoistureTemperatureAndPressure();\n        // Update pressure\n        this.updatePressure();\n        // Relax temperature\n        this.relaxPressure();\n        this.relaxPressure();\n        this.relaxPressure();\n        // Update wind speed\n        this.updateWindSpeed();\n        // Update geopotential\n        this.updateGeopotential();\n        // Update precipitations\n        this.updatePrecipitations();\n    }\n    getPointWeatherDataAt(x, y) {\n        // Irradiance\n        let irradiance = this.irradianceGrid.getIndexAt(x, y);\n        // Moisture\n        let moisture = this.moistureGrid.getIndexAt(x, y);\n        // Temperature\n        let temperature = this.temperatureGrid.getIndexAt(x, y);\n        // Pressure\n        let pressure = this.pressureGrid.getIndexAt(x, y);\n        // Wind speed and direction\n        let windSpeed = 0;\n        let windDirection = 0;\n        let windSpeedX = this.windSpeedXGrid.getIndexAt(x, y);\n        let windSpeedY = this.windSpeedYGrid.getIndexAt(x, y);\n        if (windSpeedX != 0 || windSpeedY != 0) {\n            // Calculate wind speed\n            windSpeed = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].norm(windSpeedX, windSpeedY);\n            // Normalize components\n            windSpeedX = -windSpeedX / windSpeed;\n            windSpeedY = -windSpeedY / windSpeed;\n            // Calculate angle\n            windDirection = Math.atan2(windSpeedX, windSpeedY);\n            windDirection = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].mod(windDirection, Math.PI * 2);\n        }\n        // Geopotential\n        let geopotential = this.geopotentialGrid.getIndexAt(x, y);\n        // Precipitations\n        let precipitations = this.precipitationsGrid.getIndexAt(x, y);\n        return {\n            irradiance: irradiance,\n            moisture: moisture,\n            temperature: temperature,\n            pressure: pressure,\n            windDirection: windDirection,\n            windSpeed: windSpeed,\n            geopotential: geopotential,\n            precipitations: precipitations,\n        };\n    }\n    generateOrUpdateIrradianceAndMoisture() {\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Irradiance\n                // Get data at grid cell\n                let irradiance = this.irradianceGrid.getIndexAt(x, y);\n                // Calculate new value\n                let irradianceContribute = this.climateAreaEntityManager.getEntitiesIrradianceContributeAt({ x: x, y: y });\n                irradiance = (irradiance + this.baseIrradiance + irradianceContribute) / 2;\n                // Set data at grid cell\n                this.irradianceGrid.setIndexAt(x, y, irradiance);\n                // Moisture\n                // Get data at grid cell\n                let moisture = this.moistureGrid.getIndexAt(x, y);\n                // Calculate new value\n                let moistureContribute = this.climateAreaEntityManager.getEntitiesMoistureContributeAt({ x: x, y: y });\n                moisture += moistureContribute * 0.3;\n                moisture = Math.min(2.0, Math.max(0.01, moisture));\n                // Set data at grid cell\n                this.moistureGrid.setIndexAt(x, y, moisture);\n            }\n        }\n    }\n    relaxTemperature() {\n        // Copy temperature grid\n        let oldTemperatureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        oldTemperatureGrid.copyFrom(this.temperatureGrid);\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Get data at grid cells\n                let temperature = oldTemperatureGrid.getIndexAt(x, y);\n                let temperature1 = oldTemperatureGrid.getIndexAt(x + 1, y);\n                let temperature2 = oldTemperatureGrid.getIndexAt(x - 1, y);\n                let temperature3 = oldTemperatureGrid.getIndexAt(x, y + 1);\n                let temperature4 = oldTemperatureGrid.getIndexAt(x, y - 1);\n                // Set data at grid cell\n                this.temperatureGrid.setIndexAt(x, y, temperature + 0.3 * (temperature1 + temperature2 + temperature3 + temperature4 - 4 * temperature));\n            }\n        }\n    }\n    updateTemperatureFromIrradiance(time) {\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Get grid cell values\n                let irradiance = this.irradianceGrid.getIndexAt(x, y);\n                let temperature = this.temperatureGrid.getIndexAt(x, y);\n                // Calculate irradiance temperature\n                let irradianceTemperature = (irradiance - 100) * 1.3 + 5;\n                let temperatureDifference = irradianceTemperature - temperature;\n                if (time == 1) {\n                    temperature = irradianceTemperature;\n                }\n                else if (temperatureDifference > 1.0) {\n                    temperature += 1.0;\n                }\n                else if (temperatureDifference < -1.0) {\n                    temperature -= 1.0;\n                }\n                // Set the value at the grid cell\n                this.temperatureGrid.setIndexAt(x, y, temperature);\n            }\n        }\n    }\n    advectMoistureTemperatureAndPressure() {\n        // Copy moisture grid\n        let oldMoistureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        oldMoistureGrid.copyFrom(this.moistureGrid);\n        // Copy temperature grid\n        let oldTemperatureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        oldTemperatureGrid.copyFrom(this.temperatureGrid);\n        // Copy pressure grid\n        let oldPressureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        oldPressureGrid.copyFrom(this.pressureGrid);\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Get wind components\n                let windSpeedX = this.windSpeedXGrid.getIndexAt(x, y);\n                let windSpeedY = this.windSpeedYGrid.getIndexAt(x, y);\n                // Apply global motion\n                windSpeedX += y < this.size.x / 2 ? Math.min(30, this.size.x / 2 - y) : -Math.min(30, y - this.size.x / 2);\n                // Check for wind speed\n                if (windSpeedX != 0 || windSpeedY != 0) {\n                    // Calculate factors\n                    // X\n                    let i = x - _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clamp(windSpeedX * 0.1, -32, 32);\n                    let i0 = Math.floor(i);\n                    let i1 = i0 + 1;\n                    // Y\n                    let j = y - _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clamp(windSpeedY * 0.1, -32, 32);\n                    let j0 = Math.floor(j);\n                    let j1 = j0 + 1;\n                    // Calculate interpolant factors\n                    // X\n                    let s1 = i - i0;\n                    let s0 = 1 - s1;\n                    // Y\n                    let t1 = j - j0;\n                    let t0 = 1 - t1;\n                    // Advect moisture\n                    // Get data at grid cells\n                    let moisture1 = oldMoistureGrid.getIndexAt(i0, j0);\n                    let moisture2 = oldMoistureGrid.getIndexAt(i0, j1);\n                    let moisture3 = oldMoistureGrid.getIndexAt(i1, j0);\n                    let moisture4 = oldMoistureGrid.getIndexAt(i1, j1);\n                    // Set data at grid cell\n                    this.moistureGrid.setIndexAt(x, y, s0 * (t0 * moisture1 + t1 * moisture2) +\n                        s1 * (t0 * moisture3 + t1 * moisture4));\n                    // Advect temperature\n                    // Get data at grid cells\n                    let temperature1 = oldTemperatureGrid.getIndexAt(i0, j0);\n                    let temperature2 = oldTemperatureGrid.getIndexAt(i0, j1);\n                    let temperature3 = oldTemperatureGrid.getIndexAt(i1, j0);\n                    let temperature4 = oldTemperatureGrid.getIndexAt(i1, j1);\n                    // Set data at grid cell\n                    this.temperatureGrid.setIndexAt(x, y, s0 * (t0 * temperature1 + t1 * temperature2) +\n                        s1 * (t0 * temperature3 + t1 * temperature4));\n                    // Advect pressure\n                    // Get data at grid cells\n                    let pressure1 = oldPressureGrid.getIndexAt(i0, j0);\n                    let pressure2 = oldPressureGrid.getIndexAt(i0, j1);\n                    let pressure3 = oldPressureGrid.getIndexAt(i1, j0);\n                    let pressure4 = oldPressureGrid.getIndexAt(i1, j1);\n                    // Set data at grid cell\n                    this.pressureGrid.setIndexAt(x, y, s0 * (t0 * pressure1 + t1 * pressure2) +\n                        s1 * (t0 * pressure3 + t1 * pressure4));\n                }\n            }\n        }\n    }\n    updatePressure() {\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Get data at grid cell\n                let irradiance = this.irradianceGrid.getIndexAt(x, y);\n                let temperature = this.temperatureGrid.getIndexAt(x, y);\n                let oldTemperatue = this.oldTemperatureGrid.getIndexAt(x, y);\n                let pressure = this.pressureGrid.getIndexAt(x, y);\n                let moisture = this.moistureGrid.getIndexAt(x, y);\n                // Add irradiance contribue\n                let irradiancePressure = GlobalClimateSystem.BASE_PRESSURE + irradiance / 32;\n                let irradiancePressureDifference = irradiancePressure - pressure;\n                pressure += irradiancePressureDifference * 0.01;\n                // Calculate factor\n                let temperatureDifference = Math.abs(temperature - oldTemperatue);\n                if ((temperature < 0 && oldTemperatue > 0) || (temperature > 0 && oldTemperatue < 0))\n                    temperatureDifference *= 2.0;\n                let factor = temperatureDifference * moisture * 3.0;\n                factor = Math.min(10, factor);\n                // Check for factor and pressure\n                if (factor > pressure * 0.001) {\n                    pressure -= factor;\n                }\n                else if (factor < pressure * 0.001) {\n                    pressure += factor;\n                }\n                // Clamp pressure\n                pressure = Math.max(880, Math.min(1070, pressure));\n                // Set data at grid cell\n                this.pressureGrid.setIndexAt(x, y, pressure);\n            }\n        }\n    }\n    relaxPressure() {\n        // Copy pressure grid\n        let oldPressureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.size.x, this.size.y, 0);\n        oldPressureGrid.copyFrom(this.pressureGrid);\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Calculate blur at grid cell\n                let pressure = _common_GridUtils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].calcBlurAt(oldPressureGrid, x, y);\n                // Set data at grid cell\n                this.pressureGrid.setIndexAt(x, y, pressure);\n            }\n        }\n    }\n    updateWindSpeed() {\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Calculate gradient at grid cell\n                let [pressureGradientX, pressureGradientY] = _common_GridUtils__WEBPACK_IMPORTED_MODULE_2__[\"default\"].calcGradientAt(this.pressureGrid, x, y);\n                // Get data at grid cells\n                let windSpeedX = this.windSpeedXGrid.getIndexAt(x, y);\n                let windSpeedY = this.windSpeedYGrid.getIndexAt(x, y);\n                // Apply pressure gradient\n                windSpeedX -= pressureGradientY * 3;\n                windSpeedY += pressureGradientX * 3;\n                // Apply friction\n                windSpeedX -= windSpeedX * 0.1;\n                windSpeedY -= windSpeedY * 0.1;\n                // Set values at the grid cells\n                this.windSpeedXGrid.setIndexAt(x, y, windSpeedX);\n                this.windSpeedYGrid.setIndexAt(x, y, windSpeedY);\n            }\n        }\n    }\n    updateGeopotential() {\n        const R = GlobalClimateSystem.R_DRY_AIR; // J/(kg·K)\n        const g = GlobalClimateSystem.GRAVITY; // m/s²\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                let temperatureC = this.temperatureGrid.getIndexAt(x, y); // °C\n                let temperatureK = temperatureC + 273.15; // K\n                let pressurePa = this.pressureGrid.getIndexAt(x, y); // Pa\n                // Assuming a reference pressure level P0\n                const P0 = GlobalClimateSystem.BASE_PRESSURE; // Pa\n                let T_mean = temperatureK; // Use local temperature as mean\n                // Use hypsometric equation to calculate geopotential height\n                let deltaZ = (R * T_mean) / g * Math.log(P0 / pressurePa);\n                // Update geopotential height\n                this.geopotentialGrid.setIndexAt(x, y, deltaZ);\n            }\n        }\n    }\n    updatePrecipitations() {\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Get data at grid cell\n                let temperature = this.temperatureGrid.getIndexAt(x, y);\n                let pressure = this.pressureGrid.getIndexAt(x, y);\n                let moisture = this.moistureGrid.getIndexAt(x, y);\n                // Calculate saturation index\n                let saturationMoisture = 0.18 * ((temperature + 257.3) / 200);\n                // Calculate pressure factor\n                let pressureFactor = 1 - Math.min(1.0, Math.max(0, pressure - 930) / 100);\n                let excessMoisture = (moisture - saturationMoisture) * pressureFactor;\n                let precipitations = 0;\n                // Check for conditions\n                if (excessMoisture > 0) {\n                    // Calculate precipitaions and moisture\n                    precipitations = excessMoisture * 128;\n                    precipitations = precipitations;\n                    moisture = moisture - excessMoisture;\n                    // Set data at grid cells\n                    this.moistureGrid.setIndexAt(x, y, moisture);\n                }\n                this.precipitationsGrid.setIndexAt(x, y, precipitations);\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/engine/GlobalClimateSystem.ts?");

/***/ }),

/***/ "./scripts/engine/PermanentClimateAreaEntity.ts":
/*!******************************************************!*\
  !*** ./scripts/engine/PermanentClimateAreaEntity.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PermanentClimateAreaEntity)\n/* harmony export */ });\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Utils */ \"./scripts/utils/Utils.ts\");\n/* harmony import */ var _utils_PerlinNoise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/PerlinNoise */ \"./scripts/utils/PerlinNoise.ts\");\n/* harmony import */ var _common_Grid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/Grid */ \"./scripts/common/Grid.ts\");\n/* harmony import */ var _ClimateAreaEntity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ClimateAreaEntity */ \"./scripts/engine/ClimateAreaEntity.ts\");\n// \n// PermanentClimateAreaEntity.ts\n//\n\n\n\n\nclass PermanentClimateAreaEntity extends _ClimateAreaEntity__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    // Irradiance configuration\n    irradianceConfig;\n    irradianceGrid;\n    irradianceMapNoises;\n    // Moisture configuration\n    moistureConfig;\n    moistureGrid;\n    moistureMapNoises;\n    constructor(config) {\n        let { spawnPos, size, strength } = config;\n        super({ spawnPos, size, strength });\n        this.irradianceConfig = config.irradianceConfig;\n        this.irradianceMapNoises = new _utils_PerlinNoise__WEBPACK_IMPORTED_MODULE_1__[\"default\"](config.irradianceConfig.seed);\n        this.irradianceGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.size.x, this.size.y, 0);\n        this.moistureConfig = config.moistureConfig;\n        this.moistureMapNoises = new _utils_PerlinNoise__WEBPACK_IMPORTED_MODULE_1__[\"default\"](config.moistureConfig.seed);\n        this.moistureGrid = new _common_Grid__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.size.x, this.size.y, 0);\n    }\n    init() {\n        this.generateOrUpdateParamGrid(0, this.irradianceConfig, this.irradianceGrid, this.irradianceMapNoises);\n        this.generateOrUpdateParamGrid(0, this.moistureConfig, this.moistureGrid, this.moistureMapNoises);\n    }\n    update(time) {\n        this.generateOrUpdateParamGrid(time, this.irradianceConfig, this.irradianceGrid, this.irradianceMapNoises);\n        this.generateOrUpdateParamGrid(time, this.moistureConfig, this.moistureGrid, this.moistureMapNoises);\n    }\n    getIrradianceContributeAt(pos) {\n        if (pos.x < 0 || pos.x >= this.size.x || pos.y < 0 || pos.y >= this.size.y)\n            return 0;\n        return this.irradianceGrid.getIndexAt(pos.x, pos.y);\n    }\n    getMoistureContributeAt(pos) {\n        if (pos.x < 0 || pos.x >= this.size.x || pos.y < 0 || pos.y >= this.size.y)\n            return 0;\n        return this.moistureGrid.getIndexAt(pos.x, pos.y);\n    }\n    generateOrUpdateParamGrid(time, paramConfig, grid, mapNoises) {\n        for (let x = 0; x < this.size.x; x++) {\n            for (let y = 0; y < this.size.y; y++) {\n                // Base noise value\n                let noiseValue = mapNoises.getNoiseValueAt(x, y, time, paramConfig.zoom);\n                // Get distance from center\n                let d = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].pointGradientCenterLerp(x, y, this.size.x, this.size.y);\n                // Apply gradient\n                let lerpedNoiseValue = _utils_Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lerp(paramConfig.range[0], paramConfig.range[1], noiseValue);\n                let contribute = lerpedNoiseValue * d * paramConfig.strength * this.strength;\n                // Set data\n                grid.setIndexAt(x, y, contribute);\n            }\n        }\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/engine/PermanentClimateAreaEntity.ts?");

/***/ }),

/***/ "./scripts/engine/common/GridUtils.ts":
/*!********************************************!*\
  !*** ./scripts/engine/common/GridUtils.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GridUtils)\n/* harmony export */ });\n//\n// GridUtils.ts\n//\nclass GridUtils {\n    static calcGradientAt(grid, x, y) {\n        // Get values at adjacent grid cells\n        let value1 = grid.getIndexAt(x, y + 1);\n        let value2 = grid.getIndexAt(x - 1, y);\n        let value3 = grid.getIndexAt(x, y - 1);\n        let value4 = grid.getIndexAt(x + 1, y);\n        // Calculate horizontal gradient\n        let gradientX = (value4 - value2) / 2;\n        // Calculate vertical gradient\n        let gradientY = (value1 - value3) / 2;\n        return [gradientX, gradientY];\n    }\n    static calcBlurAt(grid, x, y) {\n        // Get value at grid cell\n        let value = grid.getIndexAt(x, y);\n        // Get values at adjacent grid cells\n        let value1 = grid.getIndexAt(x, y + 1);\n        let value2 = grid.getIndexAt(x - 1, y + 1);\n        let value3 = grid.getIndexAt(x - 1, y);\n        let value4 = grid.getIndexAt(x - 1, y - 1);\n        let value5 = grid.getIndexAt(x, y - 1);\n        let value6 = grid.getIndexAt(x + 1, y - 1);\n        let value7 = grid.getIndexAt(x + 1, y);\n        let value8 = grid.getIndexAt(x + 1, y + 1);\n        value = (value * 1 / 4\n            + value1 * 1 / 16\n            + value2 * 1 / 8\n            + value3 * 1 / 8\n            + value4 * 1 / 16\n            + value5 * 1 / 8\n            + value6 * 1 / 16\n            + value7 * 1 / 8\n            + value8 * 1 / 16);\n        return value;\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/engine/common/GridUtils.ts?");

/***/ }),

/***/ "./scripts/utils/ColorsUtils.ts":
/*!**************************************!*\
  !*** ./scripts/utils/ColorsUtils.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ColorsUtils)\n/* harmony export */ });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"./scripts/utils/Utils.ts\");\n// \n// ColorsUtils.ts\n//\n\nclass ColorsUtils {\n    static toString(color) {\n        return \"rgb(\" + color[0] + \",\" + color[1] + \",\" + color[2] + \")\";\n    }\n    static lerp(color1, color2, t) {\n        let color = [0, 0, 0];\n        color[0] = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lerp(color1[0], color2[0], t);\n        color[1] = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lerp(color1[1], color2[1], t);\n        color[2] = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"default\"].lerp(color1[2], color2[2], t);\n        return color;\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/utils/ColorsUtils.ts?");

/***/ }),

/***/ "./scripts/utils/PerlinNoise.ts":
/*!**************************************!*\
  !*** ./scripts/utils/PerlinNoise.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PerlinNoise)\n/* harmony export */ });\n// \n// PerlinNoise.ts\n//\nconst DEF_CUBE_SZ = 128;\n// Hash lookup table as defined by Ken Perlin.  This is a randomly\n// arranged array of all numbers from 0-255 inclusive.\nconst DEF_PERM = [151, 160, 137, 91, 90, 15,\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n];\n// Gradient vectors\nconst DEF_GRAD3LIST = [\n    [1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0],\n    [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1],\n    [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]\n];\nclass PerlinNoise {\n    seed;\n    perm;\n    constructor(seed) {\n        this.seed = seed;\n        this.perm = [];\n        for (let i = 0; i < 512; i++) {\n            this.perm[i] = (DEF_PERM[i % 256] * this.seed) % 255;\n        }\n    }\n    getSeed() {\n        return this.seed;\n    }\n    getNoiseValueAt(x, y, z, zoom) {\n        // Zooming\n        x = x * zoom;\n        y = y * zoom;\n        z = z * zoom;\n        // Find unit grid cell containing point \n        let X = Math.floor(x / DEF_CUBE_SZ);\n        let Y = Math.floor(y / DEF_CUBE_SZ);\n        let Z = Math.floor(z / DEF_CUBE_SZ);\n        // Get relative xyz coordinates of point within that cell \n        x = (x % DEF_CUBE_SZ) * 100 / DEF_CUBE_SZ;\n        y = (y % DEF_CUBE_SZ) * 100 / DEF_CUBE_SZ;\n        z = (z % DEF_CUBE_SZ) * 100 / DEF_CUBE_SZ;\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here) \n        X = X % 255;\n        Y = Y % 255;\n        Z = Z % 255;\n        // Calculate a set of eight hashed gradient indices \n        let gi000 = this.perm[X + this.perm[Y + this.perm[Z]]] % 12;\n        let gi001 = this.perm[X + this.perm[Y + this.perm[Z + 1]]] % 12;\n        let gi010 = this.perm[X + this.perm[Y + 1 + this.perm[Z]]] % 12;\n        let gi011 = this.perm[X + this.perm[Y + 1 + this.perm[Z + 1]]] % 12;\n        let gi100 = this.perm[X + 1 + this.perm[Y + this.perm[Z]]] % 12;\n        let gi101 = this.perm[X + 1 + this.perm[Y + this.perm[Z + 1]]] % 12;\n        let gi110 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z]]] % 12;\n        let gi111 = this.perm[X + 1 + this.perm[Y + 1 + this.perm[Z + 1]]] % 12;\n        // Calculate noise contributions from each of the eight corners\n        let n000 = this.dot(DEF_GRAD3LIST[gi000], x, y, z);\n        let n100 = this.dot(DEF_GRAD3LIST[gi100], x - 100, y, z);\n        let n010 = this.dot(DEF_GRAD3LIST[gi010], x, y - 100, z);\n        let n110 = this.dot(DEF_GRAD3LIST[gi110], x - 100, y - 100, z);\n        let n001 = this.dot(DEF_GRAD3LIST[gi001], x, y, z - 100);\n        let n101 = this.dot(DEF_GRAD3LIST[gi101], x - 100, y, z - 100);\n        let n011 = this.dot(DEF_GRAD3LIST[gi011], x, y - 100, z - 100);\n        let n111 = this.dot(DEF_GRAD3LIST[gi111], x - 100, y - 100, z - 100);\n        // Compute the fade curve value for each of x, y, z\n        let u = this.fade(x);\n        let v = this.fade(y);\n        let w = this.fade(z);\n        // Interpolate along x the contributions from each of the corners\n        let nx00 = this.mix(n000, n100, u);\n        let nx01 = this.mix(n001, n101, u);\n        let nx10 = this.mix(n010, n110, u);\n        let nx11 = this.mix(n011, n111, u);\n        // Interpolate the four results along y\n        let nxy0 = this.mix(nx00, nx10, v);\n        let nxy1 = this.mix(nx01, nx11, v);\n        // Interpolate the two last results along z\n        let noise = (((this.mix(nxy0, nxy1, w) / 2) + 50) / 100);\n        return noise;\n    }\n    fade(t) {\n        t = t * 10;\n        return ((t * t * 3) / 10000 - ((t * t * t) / 5000000));\n    }\n    dot(g, x, y, z) {\n        return g[0] * x + g[1] * y + g[2] * z;\n    }\n    mix(a, b, t) {\n        return ((100 - t) * a + t * b) / 100;\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/utils/PerlinNoise.ts?");

/***/ }),

/***/ "./scripts/utils/Utils.ts":
/*!********************************!*\
  !*** ./scripts/utils/Utils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Utils)\n/* harmony export */ });\n// \n// Utils.ts\n//\nclass Utils {\n    static random(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n    static mod(n, m) {\n        return ((n % m) + m) % m;\n    }\n    static isInRagne(value, min, max) {\n        return value >= min && value <= max;\n    }\n    static clamp(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    }\n    static lerp(v0, v1, t) {\n        return (v1 - v0) * t + v0;\n    }\n    static inverseLerp(v0, v1, t) {\n        return (t - v0) / (v1 - v0);\n    }\n    static discretize(n, d) {\n        return d * Math.ceil(n / d);\n    }\n    static norm(x0, y0) {\n        return Math.sqrt(x0 * x0 + y0 * y0);\n    }\n    static pointDistance(x0, y0, x1, y1) {\n        return Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));\n    }\n    static pointGradientCenterLerp(x, y, rx, ry) {\n        let dx = 1 - Math.abs(x * 2 - rx) / rx;\n        let dy = 1 - Math.abs(y * 2 - ry) / ry;\n        return Math.min(dx, dy);\n    }\n}\n\n\n//# sourceURL=webpack://renderer/./scripts/utils/Utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/MainRenderer.ts");
/******/ 	renderer = __webpack_exports__;
/******/ 	
/******/ })()
;